#pipeline for flask application

name: Stage 2 - Intermediate Pipeline

on:
  workflow_dispatch:

# Environment variables available to all jobs
env:
  PYTHON_VERSION: '3.9'
  FLASK_ENV: development

jobs:
  # Job 1: Code Quality Checks (Linting)
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install linting tools
        run: |
          pip install flake8 pylint
      
      - name: Run Flake8 (Code Style Check)
        run: |
          # Check Python code style (will warn but not fail)
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true
          echo "‚úÖ Code style check completed"
      
      - name: List Python files
        run: |
          echo "Python files in repository:"
          find . -name "*.py" -type f

  # Job 2: Unit Tests (depends on nothing, runs in parallel)
  unit-tests:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run unit tests with pytest
        run: |
          # Run tests with coverage report
          pytest test_app.py -v --cov=. --cov-report=term-missing
      
      - name: Test summary
        if: always()
        run: |
          echo "================================"
          echo "Unit Tests Execution Summary"
          echo "================================"
          echo "Status: ${{ job.status }}"

  # Job 3: Integration Tests (runs after unit tests pass)
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests  # This job waits for unit-tests to succeed
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      
      - name: Start Flask application in background
        run: |
          nohup python app.py &
          sleep 3
          echo "Flask app started"
      
      - name: Health check test
        run: |
          echo "Testing application health..."
          for i in {1..5}; do
            if curl -s http://localhost:5000 | grep -q "welcome"; then
              echo "‚úÖ Health check passed!"
              exit 0
            fi
            echo "Attempt $i failed, retrying..."
            sleep 2
          done
          echo "‚ùå Health check failed"
          exit 1
      
      - name: API endpoint tests
        run: |
          echo "Testing API endpoints..."
          curl -s http://localhost:5000 || echo "API test completed"

  # Job 4: Build Report (runs after all tests complete)
  build-report:
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests]
    if: always()  # Run even if previous jobs fail
    
    steps:
      - name: Generate build report
        run: |
          echo "========================================="
          echo "        BUILD SUMMARY REPORT"
          echo "========================================="
          echo "Pipeline: Stage 2 - Intermediate"
          echo "Trigger: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo ""
          echo "Job Status:"
          echo "  - Code Quality: ${{ needs.code-quality.result }}"
          echo "  - Unit Tests: ${{ needs.unit-tests.result }}"
          echo "  - Integration Tests: ${{ needs.integration-tests.result }}"
          echo "========================================="
      
      - name: Check overall status
        run: |
          if [ "${{ needs.unit-tests.result }}" == "success" ] && [ "${{ needs.integration-tests.result }}" == "success" ]; then
            echo "üéâ All critical tests passed!"
            exit 0
          else
            echo "‚ö†Ô∏è Some tests failed. Check the logs above."
            exit 1
          fi
